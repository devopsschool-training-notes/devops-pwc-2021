Rajesh Kumar
=======================
Demo  - 
LAB  - '
============================
9:30 AM - 5:30 PM - 30 mins. 
------------------------
2 BREAK - 
	20 mins - 11 AM & 3.30 PM
======================================
Lunch - 1 Hour - 1 - 2 PM
--------------------------------------------
================================================================================
What is DevOps?
---------------------------
	Dev + Ops
	----------
	DEVOPS
==================================================================================================
		90s 					| 2000				|||| NOW
==================================================================================================
Deliver		CDs | Floopy		internet					Internet is using
--------------------------------------------------------------------------------------------------
Release 	1 YEAR			2 WEEKS						1 HOUR OR Few Sec

Feature 	SO MANY			1 FEATURE					1 FUNCTION

Platform 	Desktop			BROWSER						Devices

RUNNING		PHSYCIAL		VIRTUAL						Container

Users 		ISOLATED		CONNECTED					VERY MUCH CONNECTED
---------------------------------------------------------------------------------------------------
Org wants
	- Reduce a Software Dev Cost	- Reduce a Software Dev & RUNNING Cost		- Reduce a Software Dev & RUNNING Cost	
	- Improve Quality		- Improve Quality				- Improve Quality
					- Reduce a Release Cycle			- Reduce a Release Cycle		
					
				
Architecture 	Monolithic		SOA						Microservices


Model		Waterfall		Agile						DEVOPS	
--------------------------------------------------------------------------------------
TEAM ST 	Client			Client+Arch+Designer+DEV+QA			Client+Arch+Designer+DEV+QA+Ops+Support
		Arch					
		Designer		Ops+Support
		DEV			
		QA			
		Ops
		Support
										
--------------------------------------------------------------
DEVOPS	
	Combination of
	- best practices
	- best tools
	- Best & Effective process
	- Avoid unwated inherted things from past
	
	to help Employees & Employer to CHANGE a MINDET and WORKING CULTURE

	for 
	
	- Reduce a Software Dev & RUNNING Cost
	- Improve Quality
	- Reduce a Release Cycle
--------------------------------
	DEVOPS
		A Person who can CODE for a PRODUCT			JAVA
		+ A Person who can CODE for a TESTING PRODUCT		SELENIUM
		+ A Person who can CODE for a Infra & Ops		TERRAFORM





DEVOPS -> DevSecOps
-------------------
SRE
========================================================================================================

What is Docker?
--------------------------
	Container mgmt tool
	Written in Golang
	Release
		Communuity 
		Enterprise
	version - 20.X

	--- Docker Engine

	Tool
	- Saving cost
		- Saving App RUNNING COST (CPU + RAM + STO)
	- Saving time 
		- 1 DAY to 5 MINs to 1 SEC
	- Impr Eff* 
		- APP(DEV) --> APP(QA) --> APP(PROD)
		----------------------------------------
				1 SEC
				CLONE ONE

	What is Container?
	-------------------------------------------
	ISOLATE INDEPENDENT APp RUNN TIME ENV

	ONE USER From USER NS
		ATTACHED TO ONE ROOT from MNT NS
		ATTACHED TO ONE NET  from NET NS
		ATTACHED TO ONE PID  from PID NS
	
=========================================================================================
=========================================================================================
To RUN Any APP - What Resources we need?
-------------------------------------------------
HARDWARE
- CPU
- RAM
- STO
-----------
	OS
	- KERNEL			CAN CREATE	OS WOULD CREATE		APP NEED
		Namespace
			MNT(RFS)	UNLIMITED	1			1			
			USER		UNLIMITED	UNLIMITED		1	
			PID MAP		UNLIMITED	1			1
			NET		UNLIMITED	1			1
	
		ROOT FS
		USER
		PID
		NET

		cgroups 

	
kernel 
The kernel is a computer program at the core of a computer's operating system and has complete control over everything in the system.

cgroups 
cgroups is a Linux kernel feature that limits, accounts for, and isolates the resource usage of a collection of processes. 								----------------------
									CPU+RAM
FILESYSTEM
	- collections of files & dir for SOME PURPOSE.
	BOOT FILESYSTEM	AKA KERNAL FILESYSTEM		windows & linux
	ROOT FILESYSTEM	ubuntu - fedroa - centos - rhel - amazon - kali - suse - windows 10
	USER FILESYSTEM
	APP FILESYSTEM


Evolution of Computing
================================================================
PHYSCIAL 			Virtual 			Container


Other tools - https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/


URL : https://cloud.cdp.rpsconsulting.in/console/#

Passwod  - Password@1


Hema Shankar Gaonkar	1 DP-User01
Anusha Adudodla	2 DP-User02
ABHINAV KUMAR	3 DP-User03
Avinash Mallik	4 DP-User04
Harish C	5 DP-User05
Abhishek Reddy	6 DP-User06
Avinash Soni	7 DP-User07
Anubhab Pahari	8 DP-User08
Gorla Narasimha Reddy	9 DP-User09
BHARGAVI KADAKANCHI	10 DP-User10
GODWIN PK	11 DP-User11
Arindam Chakraborty	12 DP-User12
G Jyoshna	13 DP-User13
JUDITH SOUNDARYA	14 DP-User14
Akshatha Ashwathnarayan	15 DP-User15
Ragipindi Anitha	16 DP-User16
Gorla Narasimha Reddy	17 DP-User17
manideep	18 DP-User18


Windows server password -admin@123

Centos password â€“ rps/rps@123
 
How get IP address from terminal
$ ifconfig
Centos - 192.168.220.129
Root password- root/redhat 

How to install docker?
https://devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

=========================================================================

What is Docker?
Why Docker?
What is Container?

Docker Arch?
===========================================
Human -> Docker client ---> Docker Deamon -> ContainerD -> KERNEL
	-------------------------------------
		Docker Engine

Docker Components
==================================================
1. Docker Engine

2. Docker Image
----------------------

-----------------------------
ROOT FS + USER FS + APP FS
-------------------------------------
/...... + root +   ls

ubuntu = rootfs
tomcat = rootfs + java + tomcat
centos = rootfs

FROM 1 Image --- you can create multiple container


Vm Images
-----------------------------
BOOT FS + ROOT FS + USER FS + APP FS
-------------------------------------
KERNEL  + /...... + root +   ls

3. Registry
		Repository
			  version of file system



		hub.docker.com
		nexus
		artifactory

4. Container

Human --> Client --> Server
			IMAGE IN LOCAL REPO
			- YES --------------------> ContainerD ---> Kernal

			- NO --> Docker Image from HUB to LR ->  ContainerD ---> Kernal


			KERNAL Create
					1 USER
					1 NET
					1 PID MAP
					1 MOUNT from 1 COPY of  Image

					&&& 		
					ATTACH NET + PID + MNT to USER.== CONTAINER

====================================================================================
Container Lifecycle
create --> start -> stop -> start -> restart -> pause -> unpause -> kill -> remove
====================================================================================
Vms Lifecycle
--------------
create --> start -> stop -> start -> restart -> pause -> unpause -> kill -> remove

DECIDE WHAT IMAGE?
----------------------------
httpd
--------------
rootfs + httpd


PHYSIAL 			VIRTUAL MACHINE				CONTAINER
-------------------------------------------------------------------------------------
IS RUNNING 			IS RUNNING				IS RUNNING
AS LONG AS			AS LONG AS				AS LONG AS
PID 1 is running		PID 1 is running			PID 1 is running



PID 1 is SYSTEMD		PID 1 is SYSTEMD			PID 1 cAN BE ANYTHING




====================================================================================================================
1. How to get inside?
-------------------------------------
Linux - 	BASH SHELL	USING SSH 
WINDOWS - 	POWER SHELL	USING WINRM

exec
---- exec command would execute an Executable INSIDE a container
---- with SHELL & -it - You can go inside	

attach
	get attached to process of PID1 of the CONTAINER


2. How to access from outside?

 50  history
   51  clear
   52  echo $SHELL
   53  su rps
   54  clear
   55  docker ps
   56  docker ps -a
   57  docker create httpd
   58  docker ps
   59  clear
   60  docker ps -a
   61  docker start 02a829f03b08
   62  docker ps
   63  docker exec 02a829f03b08 ls
   64  docker exec 02a829f03b08 df -kh
   65  clear
   66  docker exec 02a829f03b08 du -s
   67  docker exec 02a829f03b08 du -sh
   68  docker exec -it 02a829f03b08 /bin/bash
   69  df -kh
   70  clear
   71  ps -eaf
   72  clear
   73  docker ps
   74  docker exec 02a829f03b08 ps -eaf
   75  docker create ubuntu
   76  clear
   77  docker ps -a
   78  docker -itd start c0c6ba11303a
   79  clear
   80  docker start -itd c0c6ba11303a
   81  docker start -d c0c6ba11303a
   82  docker help start
   83  clear
   84  docker ps -a
   85  docker rm c0c6ba11303a'
   86  docker rm c0c6ba11303a
   87  docker create -itd ubuntu
   88  docker help create
   89  clear
   90  docker create -it ubuntu
   91  docker ps
   92  docker ps -a
   93  docker start a6aed21e8981
   94  docker ps
   95  clear
   96  docker ps
   97  docker exec a6aed21e8981 ps -eaf
   98  docker exec a6aed21e8981 kill 1
   99  docker ps
  100  docker ps -a
  101  history
  102  clear
  103  docker ps
  104  docker ps -a
  105  /bin/bash
  106  history
  107  clear
  108  docker ps -a
  109  docker start a6aed21e8981
  110  lear
  111  docker ps
  112  docker attach a6aed21e8981
  113  docker exec 02a829f03b08 ps -eaf
  114  docker attach 02a829f03b08
  115  docker ps -a
  116  ifconfig
  117  clear
  118  docker ps
  119  docker ps -a
  120  docker start a6aed21e8981 02a829f03b08
  121  clear
  122  ls
  123  docker ps
  124  docker inspect 02a829f03b08
  125  clear
  126  docker attach 02a829f03b08
  127  clear
  128  docker ps
  129  docker attach a6aed21e8981
  130  history

131  clear
  132  docker ps
  133  docker ps -a
  134  docker start a6aed21e8981 02a829f03b08
  135  docker ps
  136  docker attach a6aed21e8981
  137  docker ps -a
  138  docker attach 02a829f03b08
  139  clear
  140  docker ps
  141  docker start a6aed21e8981 02a829f03b08
  142  docker ps
  143  docker attach a6aed21e8981
  144  clear
  145  docker ps
  146  docker inspect 02a829f03b08
  147  ping 172.17.0.3
  148  clear
  149  docker run httpd
  150  clear
  151  docker run -d httpd
  152  docker ps
  153  docker run -d httpd
  154  docker ps
  155  docker run -d httpd
  156  docker ps
  157  clear
  158  docker ps
  159  clear
  160  docker ps
  161  docker run -d -p 80:80 httpd
  162  docker ps
  163  ifconfig
  164  docker ps
  165  docker run -d -p 81:80 httpd
  166  clear
  167  docker ps


 168  ls
  169  docker cp initial-setup-ks.cfg 220b4e470a10:/tmp
  170  docker exec 220b4e470a10 ls /tmp
  171  rm -rf initial-setup-ks.cfg
  172  ls
  173  docker cp 220b4e470a10:/tmp/initial-setup-ks.cfg
  174  clear
  175  docker cp 220b4e470a10:/tmp/initial-setup-ks.cfg .
  176  ls
  177  docker diff 220b4e470a10
  178  clear
  179  docker ps
  180  docker ports 2db91f0c0aaa
  181  docker port 2db91f0c0aaa
  182  docker port 220b4e470a10
  183  clear
  184  docker ps
  185  docker rename 875357b1ddc8 raj1
  186  docker ps
  187  clear
  188  docker run -d --name raj2 httpd
  189  docker ps
  190  history































